//MMA8652 Library Test - Door Knock and Status (open/close) Sensor
//Requires TempSensor, MQTT and MMA8652 libraries
//Publishes status every 1 minute (unless disabled) to mqtt topic "MCThings/" followed by device uid
//publishes data in beacons
//Uses accelerometer transient detection to sense knocking on the door

// N Waterton 9th September 2016  V1.01: Beta Release - changed door status reporting frequency to fix bug in beacon data reporting...
// N Waterton 10th September 2016 V1.02: Beta Release - removed uptime reporting bug
// N Waterton 1st October 2016 V1.03: Beta Release - added support for LIS2DH12TR (120 module accelerometer)

Class Main
    
    Const Version As String = "V1.03"
    Shared data As dataType
    Const Sub_Topic As String = "MCThings/Publish"
    Shared Sub_Topic_Knock_Enable As String
    Shared Publish_data As Boolean
    Shared accel As MMA8652
    Shared accel1 As LIS2DH12TR
    //Shared accel As Object
    Shared TimeSinceKnockTriggered As Integer
    Shared TimeSinceDoorClosed As Integer
    
    Shared Event Boot()
        Publish_data = True
        Sub_Topic_Knock_Enable = "MCThings/" + Device.mcUID().ToString("X8") + "/EnableDoorKnock"
        TimeSinceKnockTriggered = 0
        TimeSinceDoorClosed = 0
        MQTT.Subscribe(Sub_Topic)
        MQTT.Subscribe(Sub_Topic_Knock_Enable)
        MQTT.Publish("Status", "Booted: " + Version)
        accel = New MMA8652
        If accel.online Then
            MQTT.Publish("Status", "MMA8652 Sensor Online")
            accel.ConfigureShockInterrupt(0.1, 20) //default 0.8, 0 (magnitude in g, duraton in ms)
            MQTT.Publish("KnockEnable", "True")
            'accel.ConfigureOrientationInterrupt(2.4, 500) //orientation not used in door sensor
        Else
            accel1 = New LIS2DH12TR
            If accel1.online Then
                MQTT.Publish("Status", "LIS2DH12TR Sensor Online")
                //accel.ConfigureShockInterrupt(0.1, 20) //default 0.8, 0 (magnitude in g, duraton in ms)
                MQTT.Publish("KnockEnable", "True")
            Else
                MQTT.Publish("Status", "Accel Sensor Offline")
                MQTT.Publish("KnockEnable", "False")
            End If
        End If
    End Event
    
    Shared Event NewGateway()
        MQTT.Subscribe(Sub_Topic)
        MQTT.Subscribe(Sub_Topic_Knock_Enable)
    End Event
    
    Shared Event AccelerometerInt1()
        If accel.online Then
            Dim int_source As Byte = accel.readIntSource()
            If (int_source & MMA8652.SRC_LNDPRT) = MMA8652.SRC_LNDPRT Then
                'PL interrupt occured
                //LedRed = True
                If (accel.readPLStatus() & MMA8652.BAFRO) = MMA8652.BAFRO Then
                    'front facing
                    LedRed = True
                    MQTT.Publish("Orientation", "Front Facing")
                Else
                    'back facing
                    LedRed = False
                    MQTT.Publish("Orientation", "Back Facing")
                End If
                //LedRed = False
            End If
            If (int_source & MMA8652.SRC_TRANS) = MMA8652.SRC_TRANS Then
                'Transient interrupt occured
                If (accel.readTransientSource() & MMA8652.TEA) = MMA8652.TEA Then
                    'Any Transient Occured
                    //LedGreen = True
                    If ReedSwitch = False Then //If door is closed
                        //if more than 60 seconds since Knock last triggered, and more than 5 seconds since door closed
                        If (Device.Uptime() - TimeSinceKnockTriggered > 60) And (Device.Uptime() - TimeSinceDoorClosed > 5) Then
                            Dim timeSinceLastTransient As Integer = Device.GetTimeSpan()
                            'If at least two transients within 0.75 seconds
                            If timeSinceLastTransient < 750000 And timeSinceLastTransient > 0 Then
                                Thread.Sleep(1000000) //sleep 1 second
                                If ReedSwitch = False Then //If door is still closed (prevent door opening transients from triggering)
                                    TimeSinceKnockTriggered = Device.Uptime()
                                    MQTT.Publish("Doorknock", True)
                                End If
                            End If
                        End If
                    End If
                    //LedGreen = False
                End If 
            End If
        ElseIf accel1.online Then
        End If
    End Event
    
    Shared Event ReedSwitchChanged()
        TimeSinceDoorClosed = Device.Uptime()
        Thread.Sleep(500000) //debounce
        Thread.ClearHardwareEvent()
        LedGreen = True
        Dim Door_Status As Boolean = ReedSwitch
        MQTT.Publish("Door", Door_Status)
        MQTT.BeaconPublish(dataType.DOOR, Door_Status)
        LedGreen = False
    End Event
    
    Shared Event SubscriptionDelivery()
        Dim msg As Message = Lplan.GetDelivery()
        'Dim payload As ListOfByte = msg.PayLoad
        Dim tmp As Boolean = True 'payload.ExtractFloat(0)
        Dim tmp_str As String = msg.PayLoad.ToString()
        Dim topic As String = msg.Topic.ToString()
        'MQTT.Publish("Status", "Received Message: " + topic + " : " + tmp_str)
        If topic = Sub_Topic Then
            If Boolean.TryConvert(tmp_str, tmp) Then
                Publish_data = tmp
                MQTT.Publish("Publish", Publish_data)
            Else
                MQTT.Publish("Publish", tmp_str + " :Boolean Conversion failed")
            End If 
        ElseIf topic = Sub_Topic_Knock_Enable Then
            If Boolean.TryConvert(tmp_str, tmp) Then
                If accel.online Then
                    MQTT.Publish("KnockEnable", tmp)
                    If tmp Then
                        accel.Active()
                    Else
                        accel.Standby()
                    End If
                Else
                    MQTT.Publish("Status", "Accel Sensor Offline")
                    MQTT.Publish("KnockEnable", "False")
                End If
            Else
                MQTT.Publish("KnockEnable", tmp_str + " :Boolean Conversion failed")
            End If
        Else
            MQTT.Publish("Status", topic + " :Unknown Command")
        End If
    End Event
    
    Shared Event Publish() RaiseEvent Every 1 Minutes
        LedGreen = True
        Select data
            Case dataType.UPTIME
                Dim Uptime As Integer = Device.Uptime()
                If Publish_data Then
                    MQTT.Publish("Uptime", Uptime)
                End If
                If Uptime < Short.MaxValue Then
                    MQTT.BeaconPublish(dataType.UPTIME, Uptime)
                End If
                data = dataType.BATTVOLTAGE
            Case dataType.BATTVOLTAGE
                Dim BattVolt As Integer = Device.BatteryVoltage()
                If Publish_data Then
                    MQTT.Publish("BatteryVoltage", BattVolt)
                End If
                MQTT.BeaconPublish(dataType.BATTVOLTAGE, BattVolt)
                data = dataType.TEMPERATURE
            Case dataType.TEMPERATURE
                Dim TempC As Float = TempSensor.GetTemp
                If Publish_data Then
                    MQTT.Publish("Temperature", TempC)
                End If
                MQTT.BeaconPublish(dataType.TEMPERATURE, TempC)
                data = dataType.DOOR
            Case dataType.DOOR
                Dim Door_Status As Boolean = ReedSwitch
                If Publish_data Then
                    MQTT.Publish("Door", Door_Status) //True = OPEN False = CLOSED
                End If
                MQTT.BeaconPublish(dataType.DOOR, Door_Status)
                data = dataType.UPTIME
            Case Else
                MQTT.Publish("Status", "OnLine")
                data = dataType.UPTIME
        End Select
        LedGreen = False
    End Event     
End Class 
