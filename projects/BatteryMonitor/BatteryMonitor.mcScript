
//
// This program publishes the Uptime, Battery Voltage,Temperature and status of the Low battery
// line of a PowerBoost 1000 once every 30 seconds. It is for monitoring the state of charge of a LiPo.
// Warning levels are checked every 15 seconds, and published if battery is low, or temperarature out of range.
// Data also is published in the beacon data fields. This can be read via MQTT.
// Must include TempSensor and MQTT Library
//

Define PinMode Pin0 As DigitalInputPullupWeak Alias LowBattery

Class BatteryMonitor
    
    Shared data As dataType
    Const version As String = "V1.0"
    
    Shared Event Boot()
        //LedGreen = True //turn green led on to draw power and indicate booted (removed as probably not needed)
        MQTT.Publish("Status", "Booted: " + version)
        MQTT.use_queue = True //workaround for "stop publishing" bug - not really needed, as we don't publish fast.
        data = dataType.BATTVOLTAGE
    End Event
    
    Public Function LowBatt() As Boolean
        Dim BatteryMon As Boolean = Not LowBattery
        Return BatteryMon
    End Function
    
    Public Function getUptimeString() As String
        //Kludge until DateTime Functions work
        Dim secs As Integer = Device.Uptime()
        
        Dim day As Integer = (secs / 86400).ToInteger
        secs -= 86400 * day
        Dim hrs As Integer = (secs / 3600).ToInteger
        secs -= 3600 * hrs
        Dim mins As Integer = (secs / 60).ToInteger
        secs -= 60 * mins
        
        Dim uptime_string As String = day.ToString+ ":" + hrs.ToString+ ":" + mins.ToString+ ":" + secs.ToString
        Return uptime_string
    End Function
    
    Shared Event Warning() RaiseEvent Every 15 Seconds
        Dim BattVoltCheck As Integer = Device.BatteryVoltage()
        If BattVoltCheck <= 3500 Then
            LedRed = True
            MQTT.Publish_Priority("BatteryVoltage", BattVoltCheck)
            MQTT.BeaconPublish(dataType.BATTVOLTAGE, BattVoltCheck)
            LedRed = False
        End If
        
        Dim LowBattery As Boolean = LowBatt()
        If LowBattery Then
            LedRed = True
            MQTT.Publish_Priority("LowBattery", LowBattery)
            MQTT.BeaconPublish(dataType.LOWBATT, LowBattery)
            LedRed = False
        End If
        
        Dim TempC As Float = TempSensor.GetTemp
        If TempC >= 30 Or TempC <= 10 Then
            LedRed = True
            MQTT.Publish_Priority("Temperature", TempC)
            MQTT.BeaconPublish(dataType.TEMPERATURE, TempC)
            LedRed = False
        End If
    End Event
    
    Shared Event Publish() RaiseEvent Every 30 Seconds
        LedRed = True
        Select data
            Case dataType.BATTVOLTAGE
                Dim BattVolt As Integer = Device.BatteryVoltage()
                MQTT.Publish("BatteryVoltage", BattVolt)
                MQTT.BeaconPublish(dataType.BATTVOLTAGE, BattVolt)
                data = dataType.TEMPERATURE
            Case dataType.TEMPERATURE
                Dim TempC As Float = TempSensor.GetTemp
                MQTT.Publish("Temperature", TempC)
                MQTT.BeaconPublish(dataType.TEMPERATURE, TempC)
                data = dataType.LOWBATT
            Case dataType.LOWBATT
                Dim LowBattery As Boolean = LowBatt()
                MQTT.Publish("LowBattery", LowBattery)
                MQTT.BeaconPublish(dataType.LOWBATT, LowBattery)
                data = dataType.UPTIME
            Case dataType.UPTIME
                Dim Uptime As Integer = Device.Uptime()
                MQTT.Publish("Uptime", Uptime)
                MQTT.Publish("UptimeString", getUptimeString())
                If Uptime < Short.MaxValue Then
                    MQTT.BeaconPublish(dataType.UPTIME, Uptime)
                End If
                data = dataType.BATTVOLTAGE
            Case Else
                MQTT.Publish("Status", "OnLine")
                data = dataType.BATTVOLTAGE
        End Select
        LedRed = False
    End Event  
End Class
