//
// This example publishes the Uptime/Temperature/battery Voltage/Free Ram
// Goal is to support the BME280 sensor
// Test Project to try creating a persitent object between events.


Class MQTT
    Shared mcUIDString As String
    
    Shared Sub Publish(topic As String, value As String)
        If mcUIDString = Nothing Then
            mcUIDString = Device.mcUID().ToString("X8")
        End If
        Dim text_string As ListOfByte = New ListOfByte()
        text_string.Add(value)
        Lplan.Publish("MCThings/" + mcUIDString + "/" + topic, text_string)
    End Sub
    
    Shared Sub Publish(topic As String, value As Object)
        Dim text As String = value.ToString()
        If mcUIDString = Nothing Then
            mcUIDString = Device.mcUID().ToString("X8")
        End If
        Dim text_string As ListOfByte = New ListOfByte()
        text_string.Add(text)
        Lplan.Publish("MCThings/" + mcUIDString + "/" + topic, text_string)
    End Sub
    
    Shared Sub Publish_exact(topic As String, text As String)
        Dim text_String As ListOfByte = New ListOfByte()
        text_String.Add(text)
        Lplan.Publish(topic, text_String)
    End Sub
    
    Shared Sub BeaconPublish(data_Type As Byte, data As Integer)
        data = data & 0x0fffffff //blank top byte (can only send 24 bits maximum)
        Dim hi_byte As Byte = ((data >> 16) & 0xff).ToByte()
        Dim mid_byte As Byte = ((data >> 8) & 0xff).ToByte()
        Dim low_byte As Byte = (data & 0xff).ToByte()
        Dim beconData As ListOfByte = New ListOfByte()
        beconData.Add(data_Type)
        beconData.Add(hi_byte)
        beconData.Add(mid_byte)
        beconData.Add(low_byte)
        Lplan.SetBeaconData(beconData)
        Lplan.SendBeacon()
    End Sub
    
    Shared Sub Subscribe(topic As String)
        Lplan.Subscribe(topic)
    End Sub
    
End Class

Class Main
    
    Shared booted As Boolean
    Shared count As Integer
    
    Shared Event Boot()
        
        booted = True
        count = 5     
        
    End Event
    
    Shared Event Publish_Values() RaiseEvent Every 10 Seconds
        LedGreen = True
        
        If booted Then
            MQTT.Publish("Status", "Booted")
            booted = False
            
        End If
        
        Dim Internal_Temp As TempSensor = New TempSensor()
        Dim TempC As Float = Internal_Temp.GetTemp()
        MQTT.Publish("Temperature", TempC)
        
        Dim BME280_1 As BME280_Sensor = New BME280_Sensor()
        Dim TempC_External As Float = BME280_1.readTemperature()
        MQTT.Publish("Temperature2", TempC_External)
        Dim Humidity_External As Float = BME280_1.readHumidity()
        MQTT.Publish("Humidity", Humidity_External)
        Dim Air_Pressure As Float = BME280_1.readPressure()
        MQTT.Publish("Pressure", Air_Pressure)
        Dim Uptime As Integer = Device.Uptime()
        MQTT.Publish("Uptime", Uptime)
        Dim BattVolt As Integer = Device.BatteryVoltage()
        MQTT.Publish("BatteryVoltage", BattVolt)
        Dim FreeMem As Integer = Device.MemoryAvailable()
        MQTT.Publish("FreeMemory", FreeMem)
        count = count + 1
        //MQTT.Publish("Count", count)
        
        LedGreen = False
        
    End Event  
End Class