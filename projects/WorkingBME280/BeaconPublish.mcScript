//
// This example publishes the Uptime/Temperature/battery Voltage
// Also Supports BME280 I2C sensor
// Data also is published in the beacon data fields. This can be read via MQTT.
//

Enum dataType As Byte
    NONE = 0
    UPTIME = 1
    BATTVOLTAGE = 2
    TEMPERATURE = 3
    TEMPERATURE2 = 4
    HUMIDITY = 5
    PRESSURE = 6
    ALTITUDE = 7
    MOTION = 8
End Enum

Class MQTT
    Shared mcUIDString As String
    
    Shared Sub Publish(topic As String, value As String)
        If mcUIDString = Nothing Then
            mcUIDString = Device.mcUID().ToString("X8")
        End If
        Dim text_string As ListOfByte = New ListOfByte()
        text_string.Add(value)
        Lplan.Publish("MCThings/" + mcUIDString + "/" + topic, text_string)
    End Sub
    
    Shared Sub Publish(topic As String, value As Object)
        Dim text As String = value.ToString()
        If mcUIDString = Nothing Then
            mcUIDString = Device.mcUID().ToString("X8")
        End If
        Dim text_string As ListOfByte = New ListOfByte()
        text_string.Add(text)
        Lplan.Publish("MCThings/" + mcUIDString + "/" + topic, text_string)
    End Sub
    
    Shared Sub Publish_exact(topic As String, text As String)
        Dim text_String As ListOfByte = New ListOfByte()
        text_String.Add(text)
        Lplan.Publish(topic, text_String)
    End Sub
    
    Shared Sub BeaconPublish(data_Type As Byte, data As Integer)
        data = data & 0x0fffffff //blank top byte (can only send 24 bits maximum)
        Dim hi_byte As Byte = ((data >> 16) & 0xff).ToByte()
        Dim mid_byte As Byte = ((data >> 8) & 0xff).ToByte()
        Dim low_byte As Byte = (data & 0xff).ToByte()
        Dim beconData As ListOfByte = New ListOfByte()
        beconData.Add(data_Type)
        beconData.Add(hi_byte)
        beconData.Add(mid_byte)
        beconData.Add(low_byte)
        Lplan.SetBeaconData(beconData)
        Lplan.SendBeacon()
    End Sub
    
    Shared Sub Subscribe(topic As String)
        Lplan.Subscribe(topic)
    End Sub
    
End Class

Class Main
    
    Shared SeaLevelPressure As Float
    Shared data As dataType
    //Shared BME280_1 As BME280_Sensor
    
    //Shared Event NewGateway()
    //    MQTT.Subscribe("MCThings/SeaLevelPressure")
    //End Event
    
    //Shared Event SubscriptionDelivery()
    //    Dim msg As Message = Lplan.GetDelivery()
    //    If msg.Topic= "MCThings/SeaLevelPressure" Then
    //        Dim payload As ListOfByte = msg.PayLoad
    //        Dim tmp As Float = payload.ExtractFloat(0)
    //        SeaLevelPressure = tmp
    //    End If
    //End Event
    
    Shared Event Publish() RaiseEvent Every 10 Seconds
        LedGreen = True
        
        If BME280_Sensor.online = False Then
            BME280_Sensor.Connect()
        End If
        //Dim BME280_1 As BME280_Sensor = New BME280_Sensor()
        
        Select data
            Case dataType.UPTIME
                Dim Uptime As Integer = Device.Uptime()
                MQTT.Publish("Uptime", Uptime)
                MQTT.BeaconPublish(dataType.UPTIME, Uptime)
                data = dataType.BATTVOLTAGE
            Case dataType.BATTVOLTAGE
                Dim BattVolt As Integer = Device.BatteryVoltage()
                MQTT.Publish("BatteryVoltage", BattVolt)
                MQTT.BeaconPublish(dataType.BATTVOLTAGE, BattVolt)
                data = dataType.TEMPERATURE
            Case dataType.TEMPERATURE
                Dim TempC As Float = TempSensor.GetTemp
                MQTT.Publish("Temperature", TempC)
                MQTT.BeaconPublish(dataType.TEMPERATURE, TempC)
                If BME280_Sensor.online Then
                    data = dataType.TEMPERATURE2
                Else
                    data = dataType.UPTIME
                End If
            Case dataType.TEMPERATURE2
                //external temperature
                //BME280_Sensor.TakeReading()
                Dim TempC As Float = BME280_Sensor.readTemperature
                MQTT.Publish("Temperature2", TempC)
                //MQTT.BeaconPublish(dataType.TEMPERATURE2, TempC)
                data = dataType.HUMIDITY
            Case dataType.HUMIDITY
                //external humidity
                Dim Humidity As Float = BME280_Sensor.readHumidity
                MQTT.Publish("Humidity", Humidity)
                //MQTT.BeaconPublish(dataType.HUMIDITY, Humidity)
                data = dataType.PRESSURE
            Case dataType.PRESSURE
                //external pressure
                Dim Pressure As Float = BME280_Sensor.readPressure
                MQTT.Publish("Pressure", Pressure)
                //MQTT.BeaconPublish(dataType.PRESSURE, Pressure)
                If SeaLevelPressure <> 0 Then
                    data = dataType.ALTITUDE
                Else
                    data = dataType.UPTIME
                End If
            Case dataType.ALTITUDE
                //Altitude
                Dim Altitude As Float = BME280_Sensor.readAltitude(SeaLevelPressure)
                MQTT.Publish("Altitude", Altitude)
                //MQTT.BeaconPublish(dataType.ALTITUDE, Altitude)
                //increment data
                data = dataType.UPTIME
            Case dataType.MOTION
                //increment data
                data = dataType.UPTIME 
            Case Else
                data = dataType.UPTIME
        End Select
        LedGreen = False
    End Event  
End Class